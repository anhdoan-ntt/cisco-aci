# test with FortiManager Galaxy 1.0.2
# please run example_add_device.yml first to add the device to fortimanager
- name: install a policy package to fortigate device 
  hosts: fortimanager01
  gather_facts: no
  connection: httpapi
  collections:
    - fortinet.fortimanager
  vars:
    ansible_httpapi_use_ssl: True
    ansible_httpapi_validate_certs: False
    ansible_httpapi_port: 443
    policy_package_name: 'demopackage1'
    policy_adom: 'root'
    address_name: 'address_object1'
    service_name: 'service_object1'
    schedule_name: 'always'  # use system predefined schedule
    policy_name: 'policy_one'
    fgt_device_name: 'CustomHostname'
    fgt_device_vdom: 'root'
  tasks:
    - name: Create A package on FortiManager
      fmgr_pm_pkg_adom_obj:
        method: 'set'
        url_params:
            adom: '{{ policy_adom }}'
        params:
            - data:
               - name: '{{ policy_package_name }}'
                 type: 'pkg'
      # No need to handle error, succeed always

    - name: Create the firewall address object
      fmgr_firewall_address:
        method: 'set'
        url_params:
            adom: '{{ policy_adom }}'
        params:
          - data:
             - name: '{{ address_name }}'
               comment: "address object created via generic ansible module"
               type: "ipmask"
               visibility: "enable"
               subnet: "22.33.44.55/32"

    - name: create the service object
      fmgr_firewall_service_custom:
        method: 'set'
        url_params:
            adom: '{{ policy_adom }}'
        params:
            - data:
                - name: "{{ service_name }}"
                  comment: "a service object created via generic ansible module"
                  protocol: "TCP/UDP/SCTP"
                  udp-portrange: "4018-5070"
                  visibility: "enable"

    - name: create policy in the object
      fmgr_pkg_firewall_policy:
        method: 'set'
        url_params:
            adom: '{{ policy_adom }}'
            pkg: '{{ policy_package_name }}'
        params:
          - data:
            - name: '{{ policy_name }}' 
              action: 'accept'
              srcintf: 'any'
              dstintf: 'any'
              srcaddr: '{{ address_name }}'
              dstaddr: '{{ address_name }}'
              service: '{{ service_name }}'
              schedule: '{{ schedule_name }}'
      register: policyinfo
      # this api is special, it reports error code -9998 if the policy is present
      # but it's absolutely not an error
      ignore_errors: true

    - name: detect errorr in case policy is duplicated
      fail:
        msg: "more info by :-vvvv"
      failed_when: policyinfo.meta.status.code != 0 and policyinfo.meta.status.code != -9998

    - name: associate the package target with fortigate device
      # this step is essential otherwise no install target is found
      fmgr_pm_pkg_obj:
        method: 'set'
        url_params:
            adom: '{{ policy_adom }}'
            pkg_path: '{{ policy_package_name }}'
        params:
            - data:
                'scope member':
                    - name: '{{ fgt_device_name }}'
                      vdom: '{{ fgt_device_vdom }}'

    - name: install the package
      fmgr_securityconsole_install_package:
        method: 'exec'
        params:
         - data:
              adom: '{{ policy_adom }}'
              pkg: '{{ policy_package_name }}'
              scope:
               - name: '{{ fgt_device_name }}'
                 vdom: '{{ fgt_device_vdom }}'
      # https://ansible-galaxy-fortimanager-docs.readthedocs.io/en/galaxy-1.0.2/docgen/fmgr_securityconsole_install_package.html
      register: installing_task

    - name: poll and wait for the task to complete
      fmgr_task_task_obj:
        method: get
        url_params:
            task: "{{ installing_task.meta.data.task }}"
      register: taskinfo
      until: taskinfo.meta.data.percent == 100
      retries: 30
      delay: 3

    - name: Detect errors in the final task
      fail:
        msg: "see more by : -vvv"
      failed_when: taskinfo.meta.data.state == 'error'
