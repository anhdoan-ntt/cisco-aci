# test with FortiManager Galaxy 1.0.2
- name: Create and Execute script
  hosts: fortimanager01
  gather_facts: no
  connection: httpapi
  collections:
    - fortinet.fortimanager
  vars:
    ansible_httpapi_use_ssl: True
    ansible_httpapi_validate_certs: False
    ansible_httpapi_port: 443
    script_name: 'demo script'
    fgt_device_name: 'CustomHostname'
    fgt_device_vdom: 'root'
  tasks:
    - name: create the script 
      fmgr_dvmdb_script:
         method: set
         url_params:
            adom: root
         params:
            - data:
              - name: '{{ script_name }}'
                type: 'cli'
                desc: 'a script created via FortiManager Galaxy Ansible Collection'
                # you can set an invalid string here and observe the output: failure
                content: |
                            config system global
                                set timezone 04
                            end
      register: created_script

    - name: examine the result
      fail:
        msg: 'the script is not created'
      failed_when:
        - created_script.meta.status.code != 0

    - name: create the task to execute the script on fortigate device
      fmgr_dvmdb_script_execute:
        # skip parameters validation as a result of inconsistent schema
        loose_validation: true
        method: exec
        url_params:
            adom: root
        params:
            - data:
                script: "{{ script_name }}"
                adom: root
                scope:
                  - name: '{{ fgt_device_name }}'
                    vdom: '{{ fgt_device_vdom }}'
      register: execution_task

    - name: poll and wait for the task to complete
      when: execution_task.meta.status.code == 0
      fmgr_task_task_obj:
        method: 'get'
        url_params:
            # remember it's task, not taskid
            # https://ansible-galaxy-fortimanager-docs.readthedocs.io/en/galaxy-1.0.2/docgen/fmgr_dvmdb_script_execute.html
            task: "{{ execution_task.meta.data.task }}"

      register: taskinfo
      until: taskinfo.meta.data.percent == 100
      retries: 30
      delay: 10

    - name: general error check
      fail:
        msg: 'see more -vvv'
      failed_when: execution_task.meta.status.code != 0 or taskinfo.meta.data.num_err != 0
